'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

// This is a mimimal implementation of Trade, for
// the purpose of writing tests.

var AbstractTrade = require('./trade');

var Trade = function (_AbstractTrade) {
  _inherits(Trade, _AbstractTrade);

  function Trade(obj, api, delegate) {
    _classCallCheck(this, Trade);

    var _this = _possibleConstructorReturn(this, (Trade.__proto__ || Object.getPrototypeOf(Trade)).call(this, obj, api, delegate));

    _this._createdAt = new Date();
    _this._inCurrency = 'USD';
    _this._outCurrency = 'BTC';
    _this._inAmount = 1000;
    _this._outAmount = 5000000;
    _this._medium = 'bank';
    _this._state = 'pending';
    _this._sendAmount = 1000;
    _this._outAmount = 5000000;
    _this._outAmountExpected = 5000000;
    _this._receiveAddress = '1abc';
    _this._account_index = 0; // TODO: remove explicit reference to BIP 44 wallet
    _this._txHash = null;
    _this._bankAccountNumber = '1234 ABCD 5678 EFGH';
    _this._transferIn = { details: { account: '123456789abcdefgh' } };
    _this._iSignThisID = 'adsf231413-5c8f-4ecc-82jf-asdf22424';
    return _this;
  }

  _createClass(Trade, [{
    key: 'refresh',
    value: function refresh() {
      return Promise.resolve();
    }
  }], [{
    key: 'buy',
    value: function buy(quote, medium) {
      var request = function request(receiveAddress) {
        if (medium === 'fail') {
          return Promise.reject();
        } else {
          return Promise.resolve({});
        }
      };
      return _get(Trade.__proto__ || Object.getPrototypeOf(Trade), 'buy', this).call(this, quote, medium, request);
    }
  }, {
    key: 'sell',
    value: function sell(quote, bankId) {
      var request = function request(bankId) {
        if (bankId === 'fail') {
          return Promise.reject();
        } else {
          return Promise.resolved({});
        }
      };
      return _get(Trade.__proto__ || Object.getPrototypeOf(Trade), 'sell', this).call(this, quote, bankId, request);
    }
  }]);

  return Trade;
}(AbstractTrade);

module.exports = Trade;