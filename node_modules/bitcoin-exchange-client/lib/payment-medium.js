'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var assert = require('assert');

var PaymentMedium = function () {
  function PaymentMedium(api, quote) {
    _classCallCheck(this, PaymentMedium);

    assert(this.constructor !== PaymentMedium, 'Abstract Class');
    assert(api, 'API required');
    this._api = api;

    if (quote) {
      this._quote = quote;
      this._TradeClass = quote._TradeClass;
    }

    this._accounts = [];
  }

  _createClass(PaymentMedium, [{
    key: 'buy',


    /* Depending on the exchange partner, buy() needs to be called either on
       PaymentMedium or on PaymentAccount. Examples:
       * when buying with Coinify using a bank transfer, you don't need to register
         a specific bank account. Call buy() on the PaymentMedium instance.
       * when buying with SFOX via ACH, you need to specify which bank account.
         call buy on a PaymentAccount instance.
       * when selling with Coinify, you need to register the destination bank
         account first, so call sell() on a PaymentAccount instance.
    */

    value: function buy() {
      var _this = this;

      if (!this._quote) {
        return Promise.reject('QUOTE_MISSING');
      }
      var delegate = this._quote.delegate;
      var addTrade = function addTrade(trade) {
        trade.debug = _this._quote.debug;
        delegate.trades.push(trade);
        return delegate.save.bind(delegate)().then(function () {
          return trade;
        });
      };

      return this._TradeClass.buy(this._quote, this.fiatMedium).then(addTrade);
    }
  }, {
    key: 'accounts',
    get: function get() {
      return this._accounts;
    }
  }, {
    key: 'inMedium',
    get: function get() {
      return this._inMedium;
    }
  }, {
    key: 'outMedium',
    get: function get() {
      return this._outMedium;
    }
  }, {
    key: 'fiatMedium',
    get: function get() {
      return this._fiatMedium;
    }
  }, {
    key: 'inCurrencies',
    get: function get() {
      return this._inCurrencies;
    }
  }, {
    key: 'outCurrencies',
    get: function get() {
      return this._outCurrencies;
    }
  }, {
    key: 'inCurrency',
    get: function get() {
      return this._inCurrency;
    }
  }, {
    key: 'outCurrency',
    get: function get() {
      return this._outCurrency;
    }
  }, {
    key: 'inFixedFee',
    get: function get() {
      return this._inFixedFee || 0;
    }
  }, {
    key: 'outFixedFee',
    get: function get() {
      return this._outFixedFee || 0;
    }
  }, {
    key: 'inPercentageFee',
    get: function get() {
      return this._inPercentageFee || 0;
    }
  }, {
    key: 'outPercentageFee',
    get: function get() {
      return this._outPercentageFee || 0;
    }
  }, {
    key: 'minimumInAmounts',
    get: function get() {
      return this._minimumInAmounts || {};
    }
  }, {
    key: 'fee',
    get: function get() {
      return this._fee;
    }
  }, {
    key: 'total',
    get: function get() {
      return this._total;
    }
  }]);

  return PaymentMedium;
}();

module.exports = PaymentMedium;