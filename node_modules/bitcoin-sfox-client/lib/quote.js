'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Exchange = require('bitcoin-exchange-client');
var PaymentMethod = require('./payment-medium');
var Trade = require('./trade');

var _Exchange$Helpers = Exchange.Helpers,
    toCents = _Exchange$Helpers.toCents,
    toSatoshi = _Exchange$Helpers.toSatoshi;

var isBTC = function isBTC(c) {
  return c === 'BTC';
};
var flipCurrency = function flipCurrency(c) {
  return isBTC(c) ? 'USD' : 'BTC';
};

var Quote = function (_Exchange$Quote) {
  _inherits(Quote, _Exchange$Quote);

  function Quote(obj, baseCurrency, api, delegate, debug) {
    _classCallCheck(this, Quote);

    var _this = _possibleConstructorReturn(this, (Quote.__proto__ || Object.getPrototypeOf(Quote)).call(this, api, delegate, Trade, PaymentMethod, debug));

    var expiresAt = new Date(obj.expires_on);
    var timeOfRequest = new Date(obj.current_time);
    var btcAmount = toSatoshi(obj.base_amount);
    var usdAmount = toCents(obj.quote_amount);

    _this._id = obj.quote_id;
    _this._expiresAt = expiresAt;
    _this._timeOfRequest = timeOfRequest;
    _this._rate = obj.rate;

    _this._baseCurrency = baseCurrency.toUpperCase();
    _this._baseAmount = isBTC(_this._baseCurrency) ? btcAmount : usdAmount;

    _this._quoteCurrency = flipCurrency(_this._baseCurrency);
    _this._quoteAmount = isBTC(_this._quoteCurrency) ? btcAmount : usdAmount;

    _this._feeAmount = toCents(obj.fee_amount);
    _this._feeCurrency = obj.fee_currency.toUpperCase();
    return _this;
  }

  _createClass(Quote, [{
    key: 'rate',
    get: function get() {
      return this._rate;
    }
  }], [{
    key: 'getQuote',
    value: function getQuote(api, delegate, amount, baseCurrency, quoteCurrency, debug) {
      var processQuote = function processQuote(quote) {
        var q = new Quote(quote, baseCurrency, api, delegate);
        q.debug = debug;
        return q;
      };

      var getQuote = function getQuote(_baseAmount) {
        var action = _baseAmount < 0 ? 'buy' : 'sell';

        return api.POST('quote/', {
          action: action,
          base_currency: 'btc',
          quote_currency: 'usd',
          amount: Math.abs(_baseAmount),
          amount_currency: baseCurrency.toLowerCase()
        }, 'v1', 'quotes');
      };

      return _get(Quote.__proto__ || Object.getPrototypeOf(Quote), 'getQuote', this).call(this, -amount, baseCurrency, quoteCurrency, ['BTC', 'EUR', 'GBP', 'USD', 'DKK'], debug).then(getQuote).then(processQuote);
    }
  }]);

  return Quote;
}(Exchange.Quote);

module.exports = Quote;