'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var assert = require('assert');

var BankLink = function () {
  function BankLink(api) {
    _classCallCheck(this, BankLink);

    this._api = api;
  }

  _createClass(BankLink, [{
    key: 'getAccounts',
    value: function getAccounts(token) {
      var _this = this;

      assert(token, 'Public token required');
      var filterAccounts = function filterAccounts(bankAccounts) {
        return bankAccounts.filter(function (a) {
          return ['checking', 'savings'].indexOf(a.subtype) > -1;
        });
      };

      var getAccounts = function getAccounts(token) {
        return _this._api.authPOST('account/bankEnumerate', {
          public_token: token
        });
      };

      return getAccounts(token).then(filterAccounts);
    }
  }, {
    key: 'setAccount',
    value: function setAccount(obj) {
      return this._api.authPOST('account/bankToken', {
        public_token: obj.token,
        name: obj.name,
        _id: obj.id
      });
    }
  }]);

  return BankLink;
}();

module.exports = BankLink;