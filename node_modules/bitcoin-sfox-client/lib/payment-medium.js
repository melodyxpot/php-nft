'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var ExchangePaymentMedium = require('bitcoin-exchange-client').PaymentMedium;
var PaymentAccount = require('./payment-account');
var assert = require('assert');

var PaymentMedium = function (_ExchangePaymentMediu) {
  _inherits(PaymentMedium, _ExchangePaymentMediu);

  function PaymentMedium(obj, api, quote) {
    _classCallCheck(this, PaymentMedium);

    var _this = _possibleConstructorReturn(this, (PaymentMedium.__proto__ || Object.getPrototypeOf(PaymentMedium)).call(this, api, quote));

    _this._inMedium = 'ach';
    _this._outMedium = 'blockchain';

    _this._inCurrencies = ['USD', 'BTC'];
    _this._outCurrencies = ['BTC', 'USD'];

    _this._inCurrency = 'USD';
    _this._outCurrency = 'BTC';

    _this._inFixedFee = 0;
    _this._outFixedFee = 0;
    _this._inPercentageFee = 0;
    _this._outPercentageFee = 0;

    if (quote) {
      _this._fee = 0;
      _this._total = -quote.baseAmount;
    }
    return _this;
  }

  _createClass(PaymentMedium, [{
    key: 'addAccount',
    value: function addAccount(routingNumber, accountNumber, name, nickname, type) {
      var _this2 = this;

      assert(this._inMedium === 'ach', 'Not ACH');

      return PaymentAccount.add(this._api, routingNumber, accountNumber, name, nickname, type).then(function (account) {
        _this2._accounts.push(account);
        return account;
      });
    }
  }, {
    key: 'getAccounts',
    value: function getAccounts() {
      var _this3 = this;

      return PaymentAccount.getAll(undefined, undefined, this._api).then(function (accounts) {
        _this3._accounts = accounts;
        return accounts;
      });
    }

    // Buy from a specific account, avoids the need for .getAccounts()

  }, {
    key: 'buy',
    value: function buy(account) {
      assert(account, 'Specify account');
      var acc = account.accountWithQuote(this._quote);
      return acc.buy();
    }
  }], [{
    key: 'getAll',
    value: function getAll(inCurrency, outCurrency, api, quote) {
      // Return ACH account as a type
      return Promise.resolve({ ach: new PaymentMedium(undefined, api, quote) });
    }
  }]);

  return PaymentMedium;
}(ExchangePaymentMedium);

module.exports = PaymentMedium;