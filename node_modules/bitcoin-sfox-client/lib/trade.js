'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var assert = require('assert');

var Exchange = require('bitcoin-exchange-client');

var Trade = function (_Exchange$Trade) {
  _inherits(Trade, _Exchange$Trade);

  function Trade(obj, api, delegate) {
    _classCallCheck(this, Trade);

    var _this = _possibleConstructorReturn(this, (Trade.__proto__ || Object.getPrototypeOf(Trade)).call(this, api, delegate));

    assert(obj, 'JSON missing');
    _this._id = obj.id.toLowerCase();
    _this.set(obj);
    return _this;
  }

  _createClass(Trade, [{
    key: 'setFromAPI',
    value: function setFromAPI(obj) {
      if (['pending', 'failed', 'rejected', 'completed', 'ready'].indexOf(obj.status) === -1) {
        console.warn('Unknown status:', obj.status);
      }

      this._sfox_status = obj.status;

      switch (obj.status) {
        case 'pending':
        case 'ready':
          this._state = 'processing';
          break;
        default:
          this._state = obj.status;
      }

      this._is_buy = obj.action === 'buy';

      this._inCurrency = obj.quote_currency.toUpperCase();
      this._outCurrency = obj.base_currency.toUpperCase();

      this._sendAmount = this._inCurrency === 'BTC' ? Exchange.Helpers.toSatoshi(obj.quote_amount) : Exchange.Helpers.toCents(obj.quote_amount);

      if (this._inCurrency === 'BTC') {
        this._inAmount = Exchange.Helpers.toSatoshi(obj.quote_amount);
        this._outAmount = Exchange.Helpers.toCents(obj.base_amount);
        this._outAmountExpected = Exchange.Helpers.toCents(obj.base_amount);
      } else {
        this._inAmount = Exchange.Helpers.toCents(obj.quote_amount);
        this._outAmount = Exchange.Helpers.toSatoshi(obj.base_amount);
        this._outAmountExpected = Exchange.Helpers.toSatoshi(obj.base_amount);
      }

      /* istanbul ignore if */
      if (this.debug) {
        console.info('Trade ' + this.id + ' from API');
      }
      this._createdAt = new Date(obj.created_at);

      if (this._outCurrency === 'BTC') {
        this._txHash = obj.blockchain_tx_hash || this._txHash;
        this._receiveAddress = obj.address;
      }
    }
  }, {
    key: 'setFromJSON',
    value: function setFromJSON(obj) {
      /* istanbul ignore if */
      if (this.debug) {
        console.info('Trade ' + this.id + ' from JSON');
      }
      this._state = obj.state;
      this._is_buy = obj.is_buy;
      this._delegate.deserializeExtraFields(obj, this);
      this._receiveAddress = this._delegate.getReceiveAddress(this);
      this._confirmed = obj.confirmed;
      this._txHash = obj.tx_hash;
    }
  }, {
    key: 'set',
    value: function set(obj) {
      if (Array.isArray(obj)) {
        obj = obj[0];
      }
      if (obj.status) {
        this.setFromAPI(obj);
      } else {
        this.setFromJSON(obj);
      }
      this._medium = 'ach';

      return this;
    }
  }, {
    key: 'refresh',
    value: function refresh() {
      /* istanbul ignore if */
      if (this.debug) {
        console.info('Refresh ' + this.state + ' trade ' + this.id);
      }
      return this._api.authGET('transaction/' + this._id).then(this.set.bind(this)).then(this._delegate.save.bind(this._delegate));
    }

    // QA tool:

  }, {
    key: 'fakeAchSuccess',
    value: function fakeAchSuccess() {
      var options = { id: this.id };
      return this._api.authPOST('testing/approvedeposit', options).then(this.set.bind(this)).then(this._delegate.save.bind(this._delegate));
    }

    // QA tool:

  }, {
    key: 'fakeAchFail',
    value: function fakeAchFail() {
      var options = { id: this.id, status: 'rejected' };
      return this._api.authPOST('testing/changestatus', options).then(this.set.bind(this)).then(this._delegate.save.bind(this._delegate));
    }
  }, {
    key: 'toJSON',
    value: function toJSON() {
      var serialized = {
        id: this._id,
        state: this._state,
        tx_hash: this._txHash,
        confirmed: this.confirmed,
        is_buy: this.isBuy
      };

      this._delegate.serializeExtraFields(serialized, this);

      return serialized;
    }
  }, {
    key: 'isBuy',
    get: function get() {
      return this._is_buy;
    }
  }], [{
    key: 'fetchAll',
    value: function fetchAll(api) {
      return api.authGET('transaction');
    }
  }, {
    key: 'filteredTrades',
    value: function filteredTrades(trades) {
      return trades.filter(function (trade) {
        // Only consider transactions that are complete or that we're still
        // expecting payment for:
        return ['awaiting_transfer_in', 'processing', 'completed', 'completed_test'].indexOf(trade.state) > -1;
      });
    }
  }, {
    key: 'buy',
    value: function buy(quote, medium, paymentMethodId) {
      var request = function request(receiveAddress) {
        return quote.api.authPOST('transaction', {
          quote_id: quote.id,
          destination: {
            type: 'address',
            address: receiveAddress
          },
          payment_method_id: paymentMethodId
        });
      };
      return _get(Trade.__proto__ || Object.getPrototypeOf(Trade), 'buy', this).call(this, quote, medium, request);
    }
  }]);

  return Trade;
}(Exchange.Trade);

module.exports = Trade;