'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/* To use this class, two things are needed:
1 - a delegate object with functions that provide the following:
      save() -> e.g. function () { return JSON.stringify(this._sfox); }
      email() -> String            : the users email address
      mobile() -> String           : the users mobile number
      isEmailVerified() -> Boolean : whether the users email is verified
      isMobileVerified() -> Boolean : whether the users mobile is verified
      getToken() -> stringify : JSON web token {
                                                  email: 'me@example.com',
                                                  phone_number: '+155512345678'}
      monitorAddress(address, callback) : callback(amount) if btc received
      checkAddress(address) : look for existing transaction at address
      getReceiveAddress(trade) : return the trades receive address
      reserveReceiveAddress()
      commitReceiveAddress()
      releaseReceiveAddress()
      serializeExtraFields(obj, trade) : e.g. obj.account_index = ...
      deserializeExtraFields(obj, trade)

2 - a SFOX partner identifier

var object = {user: 1, account_token: 'token'};
var sfox = new SFOX(object, delegate);
sfox.api.apiKey = ...;
sfox.delegate.save.bind(sfox.delegate)()
// "{"user":1,"account_token":"token"}"
*/

var Exchange = require('bitcoin-exchange-client');

var API = require('./api');
var Profile = require('./profile');
var Trade = require('./trade');
var Quote = require('./quote');
var PaymentMedium = require('./payment-medium');
var BankLink = require('./bank-link');

var assert = require('assert');

var SFOX = function (_Exchange$Exchange) {
  _inherits(SFOX, _Exchange$Exchange);

  function SFOX(object, delegate) {
    _classCallCheck(this, SFOX);

    var _this = _possibleConstructorReturn(this, (SFOX.__proto__ || Object.getPrototypeOf(SFOX)).call(this, delegate, Trade, Quote, PaymentMedium, BankLink));

    var obj = object || {};
    _this._partner_id = null;
    _this._user = obj.user;
    _this._auto_login = obj.auto_login;
    _this._accountToken = obj.account_token;
    _this._api = new API();
    _this._bankLink = new BankLink(_this._api);
    _this._api._accountToken = _this._accountToken;

    _this._trades = [];
    if (obj.trades) {
      for (var i = 0; i < obj.trades.length; i++) {
        var trade = new Trade(obj.trades[i], _this._api, delegate, _this);
        trade.debug = _this._debug;
        _this._trades.push(trade);
      }
    }
    return _this;
  }

  _createClass(SFOX, [{
    key: 'signup',


    // Email must be set and verified
    // Mobile must be set and verified
    value: function signup() {
      var self = this;
      var runChecks = function runChecks() {
        assert(!self.user, 'Already signed up');

        assert(self.delegate, 'ExchangeDelegate required');

        assert(self.delegate.email(), 'email required');
        assert(self.delegate.mobile(), 'mobile required');
        assert(self.delegate.isEmailVerified(), 'email must be verified');
        assert(self.delegate.isMobileVerified(), 'mobile must be verified');
      };

      var getToken = function getToken() {
        return self.delegate.getToken.bind(self.delegate)('sfox', { mobile: true });
      };

      var doSignup = function doSignup(token) {
        assert(token, 'email + mobile token missing');
        return this._api.POST('account', {
          username: self.delegate.email(),
          user_data: token
        });
      };

      var saveMetadata = function saveMetadata(res) {
        this._user = res.account.id;
        this._accountToken = res.token;
        this._api._accountToken = this._accountToken;
        return this._delegate.save.bind(this._delegate)().then(function () {
          return res;
        });
      };

      return Promise.resolve().then(runChecks.bind(this)).then(getToken.bind(this)).then(doSignup.bind(this)).then(saveMetadata.bind(this));
    }
  }, {
    key: 'fetchProfile',
    value: function fetchProfile() {
      var setProfile = function setProfile(profile) {
        this._profile = profile;
        return profile;
      };
      return Profile.fetch(this._api).then(setProfile.bind(this));
    }
  }, {
    key: 'toJSON',
    value: function toJSON() {
      var sfox = {
        user: this._user,
        account_token: this._accountToken,
        auto_login: this._auto_login,
        trades: this._TradeClass.filteredTrades(this._trades)
      };

      return sfox;
    }
  }, {
    key: 'profile',
    get: function get() {
      return this._profile || null;
    }
  }, {
    key: 'hasAccount',
    get: function get() {
      return Boolean(this._accountToken);
    }
  }, {
    key: 'buyCurrencies',
    get: function get() {
      return ['USD'];
    }
  }, {
    key: 'sellCurrencies',
    get: function get() {
      return ['USD'];
    }
  }, {
    key: 'bankLink',
    get: function get() {
      return this._bankLink;
    }
  }], [{
    key: 'new',
    value: function _new(delegate) {
      assert(delegate, 'SFOX.new requires delegate');
      var object = {
        auto_login: true
      };
      var sfox = new SFOX(object, delegate);
      return sfox;
    }
  }]);

  return SFOX;
}(Exchange.Exchange);

module.exports = SFOX;