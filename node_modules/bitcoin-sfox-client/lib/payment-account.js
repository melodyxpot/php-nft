'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var ExchangePaymentAccount = require('bitcoin-exchange-client').PaymentAccount;
var Trade = require('./trade');
var assert = require('assert');

var PaymentAccount = function (_ExchangePaymentAccou) {
  _inherits(PaymentAccount, _ExchangePaymentAccou);

  function PaymentAccount(obj, api, quote) {
    _classCallCheck(this, PaymentAccount);

    var _this = _possibleConstructorReturn(this, (PaymentAccount.__proto__ || Object.getPrototypeOf(PaymentAccount)).call(this, api, 'ach', quote, Trade));

    _this._TradeClass = Trade;

    _this._id = obj.payment_method_id;
    _this._status = obj.status;
    _this._routingNumber = obj.routing_number;
    _this._accountNumber = obj.account_number;
    _this._name = obj.nickname;
    _this._accountType = obj.account_type;
    return _this;
  }

  _createClass(PaymentAccount, [{
    key: 'buy',
    value: function buy() {
      if (this.status !== 'active') {
        return Promise.reject('ACH_ACCOUNT_INACTIVE');
      }
      return _get(PaymentAccount.prototype.__proto__ || Object.getPrototypeOf(PaymentAccount.prototype), 'buy', this).call(this);
    }
  }, {
    key: 'verify',
    value: function verify(amount1, amount2) {
      var _this2 = this;

      assert(amount1 && amount2, 'Split amounts required');
      return this._api.authPOST('payment-methods/verify', {
        payment_method_id: this._id,
        amount1: amount1,
        amount2: amount2
      }).then(function (res) {
        _this2._status = res.status;
        return _this2;
      });
    }
  }, {
    key: 'accountWithQuote',
    value: function accountWithQuote(quote) {
      // Reconstruct the object as the API would
      var obj = {
        payment_method_id: this._id,
        status: this._status,
        routing_number: this._routingNumber,
        account_number: this._accountNumber,
        nickname: this._name,
        account_type: this._accountType
      };
      var account = new PaymentAccount(obj, this._api, quote);
      return account;
    }
  }, {
    key: 'status',
    get: function get() {
      return this._status;
    }
  }, {
    key: 'routingNumber',
    get: function get() {
      return this._routingNumber;
    }
  }, {
    key: 'accountNumber',
    get: function get() {
      return this._accountNumber;
    }
  }, {
    key: 'accountType',
    get: function get() {
      return this._accountType;
    }
  }], [{
    key: 'getAll',
    value: function getAll(inMedium, outMedium, api, quote) {
      return api.authGET('payment-methods').then(function (accounts) {
        var accountsObj = [];
        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;
        var _iteratorError = undefined;

        try {
          for (var _iterator = accounts[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            var account = _step.value;

            accountsObj.push(new PaymentAccount(account, api, quote));
          }
        } catch (err) {
          _didIteratorError = true;
          _iteratorError = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion && _iterator.return) {
              _iterator.return();
            }
          } finally {
            if (_didIteratorError) {
              throw _iteratorError;
            }
          }
        }

        return accountsObj;
      });
    }
  }, {
    key: 'add',
    value: function add(api, routingNumber, accountNumber, name, type) {
      assert(routingNumber && accountNumber, 'Routing and account number required');
      assert(name, 'Account holder name required');

      return api.authPOST('payment-methods', {
        type: 'ach',
        ach: {
          currency: 'usd',
          routing_number: routingNumber,
          account_number: accountNumber,
          name1: name,
          type: type || 'checking'
        }
      }).then(function (res) {
        return new PaymentAccount(res, api);
      });
    }
  }]);

  return PaymentAccount;
}(ExchangePaymentAccount);

module.exports = PaymentAccount;