'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var assert = require('assert');

var Profile = function () {
  function Profile(obj, api) {
    _classCallCheck(this, Profile);

    this._api = api;
    this._canBuy = obj.account.can_buy;
    this._canSell = obj.account.can_sell;
    this._verification_status = obj.account.verification_status;
    this._limits = obj.account.limits.available;
  }

  _createClass(Profile, [{
    key: 'setAddress',
    value: function setAddress(street1, street2, city, state, zipcode, country) {
      assert(street1 && city && state && zipcode, 'Street, city, state, and zipcode required');
      this._street1 = street1;
      this._street2 = street2;
      this._city = city;
      this._state = state;
      this._zipcode = zipcode;
      this._country = country || 'US';
    }
  }, {
    key: 'setDriversLicense',
    value: function setDriversLicense(number, state, country) {
      this._identityType = 'driver_license';
      this._identityNumber = number;
      this._identityState = state || this._state;
      this._identityCountry = country || this._country;
    }
  }, {
    key: 'setPassport',
    value: function setPassport(number, state, country) {
      this._identityType = 'passport';
      this._identityNumber = number;
      this._identityState = state || this._state;
      this._identityCountry = country || this._country;
    }
  }, {
    key: 'setSSN',
    value: function setSSN(number, state, country) {
      this._identityType = 'ssn';
      this._identityNumber = number;
      this._identityState = state || this._state;
      this._identityCountry = country || this._country;
    }
  }, {
    key: 'verify',
    value: function verify() {
      var _this = this;

      assert(this._firstName && this._lastName, 'First and last name required');
      assert(this.address, 'Address required');
      assert(this._dateOfBirth, 'Date of birth required');
      assert(this._identityType, 'Driver license, passport or SSN required');

      return this.api.authPOST('account/verify', {
        firstname: this.firstName,
        middlename: this.middleName || '',
        lastname: this.lastName,
        street1: this.address.street.line1,
        street2: this.address.street.line2 || '',
        city: this.address.city,
        state: this.address.state,
        zipcode: this.address.zipcode,
        country: this.address.country,
        birth_day: this.dateOfBirth.getDate(),
        birth_month: this.dateOfBirth.getMonth() + 1,
        birth_year: this.dateOfBirth.getFullYear(),
        identity: this.identity
      }).then(function (res) {
        _this._can_buy = res.account.can_buy;
        _this._can_sell = res.account.can_sell;
        _this._limits = res.account.limits.available;
        _this._verification_status = res.account.verification_status;
      });
    }
  }, {
    key: 'getSignedURL',
    value: function getSignedURL(type, filename) {
      return this.api.authPOST('account/uploads/sign', {
        type: type,
        filename: filename
      });
    }
  }, {
    key: 'api',
    get: function get() {
      return this._api;
    }
  }, {
    key: 'firstName',
    get: function get() {
      return this._firstName;
    },
    set: function set(val) {
      this._firstName = val;
    }
  }, {
    key: 'middleName',
    get: function get() {
      return this._fullName;
    },
    set: function set(val) {
      this._middleName = val;
    }
  }, {
    key: 'lastName',
    get: function get() {
      return this._lastName;
    },
    set: function set(val) {
      this._lastName = val;
    }
  }, {
    key: 'canBuy',
    get: function get() {
      return this._canBuy;
    }
  }, {
    key: 'canSell',
    get: function get() {
      return this._canSell;
    }
  }, {
    key: 'address',
    get: function get() {
      return {
        street: {
          line1: this._street1,
          line2: this._street2
        },
        city: this._city,
        state: this._state,
        zipcode: this._zipcode,
        country: this._country
      };
    }
  }, {
    key: 'dateOfBirth',
    get: function get() {
      return this._dateOfBirth;
    },
    set: function set(val) {
      assert(val instanceof Date, 'Date Object expected');
      this._dateOfBirth = val;
    }
  }, {
    key: 'identity',
    get: function get() {
      return {
        type: this._identityType,
        number: this._identityNumber,
        state: this._identityState,
        country: this._identityCountry
      };
    }
  }, {
    key: 'verificationStatus',
    get: function get() {
      return this._verification_status;
    }
  }, {
    key: 'limits',
    get: function get() {
      return this._limits;
    }
  }], [{
    key: 'fetch',
    value: function fetch(api) {
      return api.authGET('account').then(function (res) {
        var profile = new Profile(res, api);
        return profile;
      });
    }
  }]);

  return Profile;
}();

module.exports = Profile;