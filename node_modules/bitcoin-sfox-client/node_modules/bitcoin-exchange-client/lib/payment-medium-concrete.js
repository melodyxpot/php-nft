'use strict';

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

// This is a mimimal implementation of PaymentMedium, for
// the purpose of writing tests.

var AbstractPaymentMedium = require('./payment-medium');

var PaymentMedium = function (_AbstractPaymentMediu) {
  _inherits(PaymentMedium, _AbstractPaymentMediu);

  function PaymentMedium(api, quote) {
    _classCallCheck(this, PaymentMedium);

    var _this = _possibleConstructorReturn(this, (PaymentMedium.__proto__ || Object.getPrototypeOf(PaymentMedium)).call(this, api, quote));

    _this._inMedium = 'bank';
    _this._outMedium = 'blockchain';

    _this._fiatMedium = 'bank';
    _this._inCurrencies = ['USD', 'BTC'];
    _this._outCurrencies = ['BTC', 'USD'];
    _this._inCurrency = 'USD';
    _this._outCurrency = 'BTC';

    _this._fee = 0;
    _this._total = 0;
    return _this;
  }

  return PaymentMedium;
}(AbstractPaymentMedium);

module.exports = PaymentMedium;