'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var assert = require('assert');

var PaymentAccount = function () {
  function PaymentAccount(api, fiatMedium, quote, TradeClass) {
    _classCallCheck(this, PaymentAccount);

    assert(api, 'API required');
    assert(TradeClass, 'Trade class required');
    this._api = api;
    this._quote = quote;
    this._TradeClass = TradeClass;
    this._fiatMedium = fiatMedium;
  }

  _createClass(PaymentAccount, [{
    key: 'buy',
    value: function buy() {
      var _this = this;

      if (!this._quote) {
        return Promise.reject('QUOTE_MISSING');
      }
      var delegate = this._quote.delegate;
      var addTrade = function addTrade(trade) {
        trade.debug = _this._quote.debug;
        delegate.trades.push(trade);
        return delegate.save.bind(delegate)().then(function () {
          return trade;
        });
      };

      return this._TradeClass.buy(this._quote, this.fiatMedium, this._id).then(addTrade);
    }
  }, {
    key: 'id',
    get: function get() {
      return this._id;
    }
  }, {
    key: 'fiatMedium',
    get: function get() {
      return this._fiatMedium;
    }
  }, {
    key: 'name',
    get: function get() {
      return this._name;
    }
  }]);

  return PaymentAccount;
}();

module.exports = PaymentAccount;