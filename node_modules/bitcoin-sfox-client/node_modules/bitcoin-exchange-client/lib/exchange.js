'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var assert = require('assert');
var Helpers = require('./helpers');

// This is poor man's abstract class:
// https://gist.github.com/Zodiase/af44115098b20d69c531

var Exchange = function () {
  function Exchange(delegate, TradeClass, QuoteClass, PaymentMediumClass) {
    _classCallCheck(this, Exchange);

    assert(this.constructor !== Exchange, 'Abstract Class');
    assert(delegate, 'ExchangeDelegate required');
    assert(TradeClass, 'Trade class required');
    assert(QuoteClass, 'Quote class required');
    assert(QuoteClass, 'PaymentMethod class required');
    assert(QuoteClass.getQuote, 'Quote.getQuote missing');
    this._delegate = delegate;
    this._trades = [];
    this._TradeClass = TradeClass;
    this._QuoteClass = QuoteClass;
    this._PaymentMediumClass = PaymentMediumClass;
  }

  _createClass(Exchange, [{
    key: 'getBuyMethods',
    value: function getBuyMethods() {
      return this._PaymentMediumClass.getAll(undefined, 'BTC', this._api);
    }
  }, {
    key: 'getSellMethods',
    value: function getSellMethods() {
      return this._PaymentMediumClass.getAll('BTC', undefined, this._api);
    }
  }, {
    key: 'getBuyQuote',
    value: function getBuyQuote(amount, baseCurrency, quoteCurrency) {
      assert(baseCurrency, 'Specify base currency');
      assert(baseCurrency !== 'BTC' || quoteCurrency, 'Specify quote currency');
      // istanbul ignore else
      if (baseCurrency !== 'BTC') {
        quoteCurrency = 'BTC';
      }
      return this._QuoteClass.getQuote(this._api, this._delegate, -amount, baseCurrency, quoteCurrency, this._debug);
    }
  }, {
    key: 'updateList',
    value: function updateList(list, items, ListClass) {
      var item;
      for (var i = 0; i < items.length; i++) {
        item = undefined;
        for (var k = 0; k < list.length; k++) {
          var itemId = Helpers.isNumber(items[i].id) ? items[i].id : items[i].id.toLowerCase();
          if (list[k]._id === itemId) {
            item = list[k];
            item.debug = this.debug;
            item.set.bind(item)(items[i]);
          }
        }
        if (item === undefined) {
          item = new ListClass(items[i], this._api, this.delegate, this);
          item.debug = this.debug;
          list.push(item);
        }
      }
    }
  }, {
    key: 'getTrades',
    value: function getTrades() {
      var _this = this;

      var save = function save() {
        return _this.delegate.save.bind(_this.delegate)().then(function () {
          return _this._trades;
        });
      };
      var update = function update(trades) {
        _this.updateList(_this._trades, trades, _this._TradeClass);
      };
      var process = function process() {
        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;
        var _iteratorError = undefined;

        try {
          for (var _iterator = _this._trades[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            var trade = _step.value;

            trade.process(_this._trades);
          }
        } catch (err) {
          _didIteratorError = true;
          _iteratorError = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion && _iterator.return) {
              _iterator.return();
            }
          } finally {
            if (_didIteratorError) {
              throw _iteratorError;
            }
          }
        }
      };
      return this._TradeClass.fetchAll(this._api).then(update).then(process).then(save);
    }
  }, {
    key: 'monitorPayments',
    value: function monitorPayments() {
      this._TradeClass.monitorPayments(this._trades, this.delegate);
    }
  }, {
    key: 'api',
    get: function get() {
      return this._api;
    }
  }, {
    key: 'debug',
    get: function get() {
      return this._debug;
    },
    set: function set(value) {
      this._debug = Boolean(value);
      this._delegate.debug = Boolean(value);
      var _iteratorNormalCompletion2 = true;
      var _didIteratorError2 = false;
      var _iteratorError2 = undefined;

      try {
        for (var _iterator2 = this.trades[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
          var trade = _step2.value;

          trade.debug = Boolean(value);
        }
      } catch (err) {
        _didIteratorError2 = true;
        _iteratorError2 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion2 && _iterator2.return) {
            _iterator2.return();
          }
        } finally {
          if (_didIteratorError2) {
            throw _iteratorError2;
          }
        }
      }
    }
  }, {
    key: 'user',
    get: function get() {
      return this._user;
    }
  }, {
    key: 'autoLogin',
    get: function get() {
      return this._auto_login;
    },
    set: function set(value) {
      assert(Helpers.isBoolean(value), 'Boolean');
      this._auto_login = value;
      this.delegate.save.bind(this.delegate)();
    }
  }, {
    key: 'trades',
    get: function get() {
      return this._trades;
    }
  }, {
    key: 'delegate',
    get: function get() {
      return this._delegate;
    }
  }]);

  return Exchange;
}();

module.exports = Exchange;