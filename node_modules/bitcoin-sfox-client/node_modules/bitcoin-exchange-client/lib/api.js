'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Helpers = require('./helpers');
var assert = require('assert');

var API = function () {
  function API() {
    _classCallCheck(this, API);

    this._testnet = false;
  }

  _createClass(API, [{
    key: '_request',
    value: function _request(method, url, data, headers) {
      headers = headers || {};

      headers['Content-Type'] = 'application/json';

      var options = {
        headers: headers,
        credentials: 'omit'
      };

      // encodeFormData :: Object -> url encoded params
      var encodeFormData = function encodeFormData(data) {
        var encoded = Object.keys(data).map(function (k) {
          return encodeURIComponent(k) + '=' + encodeURIComponent(data[k]);
        }).join('&');
        return encoded;
      };

      if (data && Object.keys(data).length !== 0) {
        if (method === 'GET') {
          url += '?' + encodeFormData(data);
        } else {
          options.body = JSON.stringify(data);
        }
      }

      options.method = method;

      var handleNetworkError = function handleNetworkError(e) {
        return Promise.reject({ error: 'EXCHANGE_CONNECT_ERROR', message: e });
      };

      var checkStatus = function checkStatus(response) {
        if (response.status === 204) {
          return;
        } else if (response.status >= 200 && response.status < 300) {
          return response.json();
        } else {
          return response.text().then(Promise.reject.bind(Promise));
        }
      };

      return fetch(url, options).catch(handleNetworkError).then(checkStatus);
    }
  }, {
    key: 'testnet',
    set: function set(value) {
      assert(Helpers.isBoolean(value), 'Boolean expected');
      this._testnet = value;
    }
  }, {
    key: 'production',
    set: function set(value) {
      assert(Helpers.isBoolean(value), 'Boolean expected');
      this._production = value;
    }
  }]);

  return API;
}();

module.exports = API;