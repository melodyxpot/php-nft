'use strict';

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

// This is a mimimal implementation of Exchange, for
// the purpose of writing tests.

var AbstractExchange = require('./exchange');

var Trade = require('./trade');
var Quote = require('./quote');
var PaymentMedium = require('./payment-medium');

var Exchange = function (_AbstractExchange) {
  _inherits(Exchange, _AbstractExchange);

  function Exchange(delegate) {
    _classCallCheck(this, Exchange);

    return _possibleConstructorReturn(this, (Exchange.__proto__ || Object.getPrototypeOf(Exchange)).call(this, delegate, Trade, Quote, PaymentMedium));
  }

  return Exchange;
}(AbstractExchange);

module.exports = Exchange;