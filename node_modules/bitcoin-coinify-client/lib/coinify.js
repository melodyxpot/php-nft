'use strict';

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Exchange = require('bitcoin-exchange-client');
var CoinifyProfile = require('./profile');
var Trade = require('./trade');
var CoinifyKYC = require('./kyc');
var PaymentMedium = require('./payment-medium');
var ExchangeRate = require('./exchange-rate');
var Quote = require('./quote');
var API = require('./api');
var KYC = require('./kyc');
var Helpers = require('bitcoin-exchange-client').Helpers;

var assert = require('assert');

var Coinify = function (_Exchange$Exchange) {
  _inherits(Coinify, _Exchange$Exchange);

  function Coinify(obj, delegate) {
    _classCallCheck(this, Coinify);

    var api = new API('https://app-api.coinify.com/');

    var _this = _possibleConstructorReturn(this, (Coinify.__proto__ || Object.getPrototypeOf(Coinify)).call(this, obj, delegate, api, Trade, Quote, PaymentMedium));

    assert(delegate.getToken, 'delegate.getToken() required');
    _this._partner_id = null;
    _this._user = obj.user;
    _this._auto_login = obj.auto_login;
    _this._offlineToken = obj.offline_token;

    _this._api = api;
    _this._api._offlineToken = _this._offlineToken;

    _this._profile = new CoinifyProfile(_this._api);

    _this._buyCurrencies = null;
    _this._sellCurrencies = null;

    _this._kycs = [];

    _this.exchangeRate = new ExchangeRate(_this._api);
    return _this;
  }

  _createClass(Coinify, [{
    key: 'getTrades',
    value: function getTrades() {
      return _get(Coinify.prototype.__proto__ || Object.getPrototypeOf(Coinify.prototype), 'getTrades', this).call(this, Quote);
    }
  }, {
    key: 'toJSON',
    value: function toJSON() {
      var coinify = {
        user: this._user,
        offline_token: this._offlineToken,
        auto_login: this._auto_login,
        trades: Trade.filteredTrades(this._trades)
      };

      return coinify;
    }

    // Country and default currency must be set
    // Email must be set and verified

  }, {
    key: 'signup',
    value: function signup(countryCode, currencyCode) {
      var self = this;
      var runChecks = function runChecks() {
        assert(!self.user, 'Already signed up');

        assert(self.delegate, 'ExchangeDelegate required');

        assert(countryCode && Exchange.Helpers.isString(countryCode) && countryCode.length === 2 && countryCode.match(/[a-zA-Z]{2}/), 'ISO 3166-1 alpha-2');

        assert(currencyCode, 'currency required');

        assert(self.delegate.email(), 'email required');
        assert(self.delegate.isEmailVerified(), 'email must be verified');
      };

      var doSignup = function doSignup(emailToken) {
        assert(emailToken, 'email token missing');
        return this._api.POST('signup/trader', {
          email: self.delegate.email(),
          partnerId: self.partnerId,
          defaultCurrency: currencyCode, // ISO 4217
          profile: {
            address: {
              country: countryCode.toUpperCase()
            }
          },
          trustedEmailValidationToken: emailToken,
          generateOfflineToken: true
        });
      };

      var saveMetadata = function saveMetadata(res) {
        this._user = res.trader.id;
        this._offlineToken = res.offlineToken;
        this._api._offlineToken = this._offlineToken;
        return this._delegate.save.bind(this._delegate)().then(function () {
          return res;
        });
      };

      var getToken = function getToken() {
        return this.delegate.getToken.bind(this.delegate)('coinify', { walletAge: true });
      };

      return Promise.resolve().then(runChecks.bind(this)).then(getToken.bind(this)).then(doSignup.bind(this)).then(saveMetadata.bind(this));
    }
  }, {
    key: 'fetchProfile',
    value: function fetchProfile() {
      return this._profile.fetch();
    }
  }, {
    key: 'triggerKYC',
    value: function triggerKYC() {
      var _this2 = this;

      var addKYC = function addKYC(kyc) {
        _this2._kycs.push(kyc);
        return kyc;
      };

      return CoinifyKYC.trigger(this._api).then(addKYC);
    }
  }, {
    key: 'updateKYCs',
    value: function updateKYCs(list, items) {
      var item;
      for (var i = 0; i < items.length; i++) {
        item = undefined;
        for (var k = 0; k < list.length; k++) {
          var itemId = Helpers.isNumber(items[i].id) ? items[i].id : items[i].id.toLowerCase();
          if (list[k]._id === itemId) {
            item = list[k];
            item.debug = this.debug;
            item.set.bind(item)(items[i]);
          }
        }
        if (item === undefined) {
          item = new KYC(items[i], this._api, this.delegate, this);
          item.debug = this.debug;
          list.push(item);
        }
      }
    }
  }, {
    key: 'getKYCs',
    value: function getKYCs() {
      var _this3 = this;

      var save = function save() {
        return _this3.delegate.save.bind(_this3.delegate)().then(function () {
          return _this3._kycs;
        });
      };
      var update = function update(kycs) {
        _this3.updateKYCs(_this3._kycs, kycs, CoinifyKYC);
      };
      return CoinifyKYC.fetchAll(this._api, this).then(update).then(save);
    }
  }, {
    key: 'getBuyCurrencies',
    value: function getBuyCurrencies() {
      var getCurrencies = function getCurrencies(paymentMethods) {
        var currencies = [];
        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;
        var _iteratorError = undefined;

        try {
          for (var _iterator = Object.entries(paymentMethods)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            var _step$value = _slicedToArray(_step.value, 2),
                paymentMethod = _step$value[1];

            var _iteratorNormalCompletion2 = true;
            var _didIteratorError2 = false;
            var _iteratorError2 = undefined;

            try {
              for (var _iterator2 = paymentMethod.inCurrencies[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                var inCurrency = _step2.value;

                if (currencies.indexOf(inCurrency) === -1) {
                  currencies.push(inCurrency);
                }
              }
            } catch (err) {
              _didIteratorError2 = true;
              _iteratorError2 = err;
            } finally {
              try {
                if (!_iteratorNormalCompletion2 && _iterator2.return) {
                  _iterator2.return();
                }
              } finally {
                if (_didIteratorError2) {
                  throw _iteratorError2;
                }
              }
            }
          }
        } catch (err) {
          _didIteratorError = true;
          _iteratorError = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion && _iterator.return) {
              _iterator.return();
            }
          } finally {
            if (_didIteratorError) {
              throw _iteratorError;
            }
          }
        }

        this._buyCurrencies = JSON.parse(JSON.stringify(currencies));
        return currencies;
      };
      return this.getBuyMethods().then(getCurrencies.bind(this));
    }
  }, {
    key: 'getSellCurrencies',
    value: function getSellCurrencies() {
      var getCurrencies = function getCurrencies(paymentMethods) {
        var currencies = [];
        var _iteratorNormalCompletion3 = true;
        var _didIteratorError3 = false;
        var _iteratorError3 = undefined;

        try {
          for (var _iterator3 = Object.entries(paymentMethods)[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
            var _step3$value = _slicedToArray(_step3.value, 2),
                paymentMethod = _step3$value[1];

            var _iteratorNormalCompletion4 = true;
            var _didIteratorError4 = false;
            var _iteratorError4 = undefined;

            try {
              for (var _iterator4 = paymentMethod.outCurrencies[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
                var outCurrency = _step4.value;

                if (currencies.indexOf(outCurrency) === -1) {
                  currencies.push(outCurrency);
                }
              }
            } catch (err) {
              _didIteratorError4 = true;
              _iteratorError4 = err;
            } finally {
              try {
                if (!_iteratorNormalCompletion4 && _iterator4.return) {
                  _iterator4.return();
                }
              } finally {
                if (_didIteratorError4) {
                  throw _iteratorError4;
                }
              }
            }
          }
        } catch (err) {
          _didIteratorError3 = true;
          _iteratorError3 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion3 && _iterator3.return) {
              _iterator3.return();
            }
          } finally {
            if (_didIteratorError3) {
              throw _iteratorError3;
            }
          }
        }

        this._sellCurrencies = JSON.parse(JSON.stringify(currencies));
        return currencies;
      };
      return this.getSellMethods().then(getCurrencies.bind(this));
    }
  }, {
    key: 'profile',
    get: function get() {
      if (!this._profile._did_fetch) {
        return null;
      } else {
        return this._profile;
      }
    }
  }, {
    key: 'kycs',
    get: function get() {
      return this._kycs;
    }
  }, {
    key: 'hasAccount',
    get: function get() {
      return Boolean(this._offlineToken);
    }
  }, {
    key: 'partnerId',
    get: function get() {
      return this._partner_id;
    },
    set: function set(value) {
      this._partner_id = value;
    }
  }, {
    key: 'buyCurrencies',
    get: function get() {
      return this._buyCurrencies;
    }
  }, {
    key: 'sellCurrencies',
    get: function get() {
      return this._sellCurrencies;
    }
  }, {
    key: 'bank',
    get: function get() {
      return this._bank;
    }
  }], [{
    key: 'new',
    value: function _new(delegate) {
      assert(delegate, 'Coinify.new requires delegate');
      var object = {
        auto_login: true
      };
      var coinify = new Coinify(object, delegate);
      return coinify;
    }
  }]);

  return Coinify;
}(Exchange.Exchange);

module.exports = Coinify;