'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var PaymentAccount = require('./payment-account');
var assert = require('assert');

var BankAccount = function (_PaymentAccount) {
  _inherits(BankAccount, _PaymentAccount);

  function BankAccount(account, api, quote) {
    _classCallCheck(this, BankAccount);

    var _this = _possibleConstructorReturn(this, (BankAccount.__proto__ || Object.getPrototypeOf(BankAccount)).call(this, api, quote));

    _this._quote = quote;
    _this._id = account.id;
    _this._trader_id = account.trader_id;
    _this._account = {
      _bic: account.account.bic,
      _currency: account.account.currency,
      _number: account.account.number,
      _type: account.account.type
    };
    _this._bank = {
      _address: {
        _country: account.bank.address.country
      }
    };
    _this._holder = {
      _name: account.holder.name,
      _address: {
        _city: account.holder.address.city,
        _country: account.holder.address.country,
        _street: account.holder.address.street,
        _zipcode: account.holder.address.zipcode
      }
    };
    return _this;
  }

  _createClass(BankAccount, [{
    key: 'delete',
    value: function _delete() {
      var ID = this._id;
      return this._api.DELETE('bank-accounts/' + ID).then(function (res) {
        return console.log('delete should return undefined:', res);
      });
    }
  }, {
    key: 'sell',
    value: function sell() {
      return _get(BankAccount.prototype.__proto__ || Object.getPrototypeOf(BankAccount.prototype), 'sell', this).call(this).then(function (trade) {
        console.log('*** SELL TRADE CREATED ***', trade);
        return trade;
      });
    }
  }, {
    key: 'updateQuote',
    value: function updateQuote(quote) {
      this._quote = quote;
    }
  }], [{
    key: 'add',
    value: function add(obj, api, quote) {
      assert(obj, 'bank obj is required');

      var b = {
        account: {
          currency: obj.account.currency,
          bic: obj.account.bic,
          number: obj.account.number
        },
        holder: {
          name: obj.holder.name,
          address: {
            street: obj.holder.address.street,
            city: obj.holder.address.city,
            zipcode: obj.holder.address.zipcode,
            country: obj.holder.address.country
          }
        },
        bank: {
          address: {
            country: obj.bank.address.country,
            street: obj.bank.address.street || null,
            zipcode: obj.bank.address._ipcode || null,
            city: obj.bank.address.city || null
          }
        }
      };
      return api.authPOST('bank-accounts', b).then(function (bankObj) {
        return new BankAccount(bankObj, api, quote);
      });
    }
  }, {
    key: 'getAll',
    value: function getAll(api, quote) {
      return api.authGET('bank-accounts').then(function (accountObjs) {
        var accounts = [];
        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;
        var _iteratorError = undefined;

        try {
          for (var _iterator = accountObjs[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            var accountObj = _step.value;

            accounts.push(new BankAccount(accountObj, api, quote));
          }
        } catch (err) {
          _didIteratorError = true;
          _iteratorError = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion && _iterator.return) {
              _iterator.return();
            }
          } finally {
            if (_didIteratorError) {
              throw _iteratorError;
            }
          }
        }

        return accounts;
      });
    }
  }]);

  return BankAccount;
}(PaymentAccount);

module.exports = BankAccount;